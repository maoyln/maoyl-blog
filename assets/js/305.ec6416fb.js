(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{659:function(v,_,e){"use strict";e.r(_);var t=e(7),o=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"什么是树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是树"}},[v._v("#")]),v._v(" 什么是树")]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("提示")]),v._v(" "),_("p",[v._v("树是一种常见的数据结构，用于表示层次关系的数据。每个节点可以有零个或多个子节点。树的顶点称为根节点，其他节点称为子节点或叶节点。")])]),v._v(" "),_("h2",{attrs:{id:"树的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#树的基本概念"}},[v._v("#")]),v._v(" 树的基本概念")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("根节点（Root Node）")]),v._v("：树的顶点。")]),v._v(" "),_("li",[_("code",[v._v("节点（Node）")]),v._v("：树的基本单元，可以包含数据和指向子节点的链接。")]),v._v(" "),_("li",[_("code",[v._v("叶节点（Leaf Node）")]),v._v("：没有子节点的节点。")]),v._v(" "),_("li",[_("code",[v._v("父节点（Parent Node）")]),v._v("：有子节点的节点。")]),v._v(" "),_("li",[_("code",[v._v("子节点（Child Node）")]),v._v("：从父节点衍生出来的节点。")]),v._v(" "),_("li",[_("code",[v._v("层级（Level）")]),v._v("：节点的深度，从根节点开始，根节点的层级为0。")]),v._v(" "),_("li",[_("code",[v._v("子树（Subtree）")]),v._v("：由节点及其所有后代节点组成的树。")])]),v._v(" "),_("h2",{attrs:{id:"树的基本术语"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#树的基本术语"}},[v._v("#")]),v._v(" 树的基本术语")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("结点的度（Degree）")]),v._v("：结点的子树个数")]),v._v(" "),_("li",[_("code",[v._v("树的度")]),v._v("：树的所有结点中最大的度数")]),v._v(" "),_("li",[_("code",[v._v("叶结点（Leaf）")]),v._v("：度为0的结点")]),v._v(" "),_("li",[_("code",[v._v("父结点（Parent）")]),v._v("：有子树的结点是其子树的根结点的父结点")]),v._v(" "),_("li",[_("code",[v._v("子结点（Child）")]),v._v("：若A结点是B结点的父结点，则称B结点是A结点的子结点；子结点也称孩子结点。")]),v._v(" "),_("li",[_("code",[v._v("兄弟结点（Sibling）")]),v._v("：具有同一父结点的各结点彼此是兄弟结点。")]),v._v(" "),_("li",[_("code",[v._v("路径和路径长度")]),v._v("：从结点n1到nk的路径为一个结点序列n1 , n2 ,... , nk , ni是 ni+1的父结点。路径所包含边的个数为路径的长度。")]),v._v(" "),_("li",[_("code",[v._v("祖先结点(Ancestor)")]),v._v("：沿树根到某一结点路径上的所有结点都是这个结点的祖先结点。")]),v._v(" "),_("li",[_("code",[v._v("子孙结点(Descendant)")]),v._v("：某一结点的子树中的所有结点是这个结点的子孙。")]),v._v(" "),_("li",[_("code",[v._v("结点的层次（Level）")]),v._v("：规定根结点在1层，其它任一结点的层数是其父结点的层数加1。")]),v._v(" "),_("li",[_("code",[v._v("树的深度（Depth）")]),v._v("：树中所有结点中的最大层次是这棵树的深度。")])]),v._v(" "),_("h2",{attrs:{id:"树的表示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#树的表示"}},[v._v("#")]),v._v(" 树的表示")]),v._v(" "),_("blockquote",[_("p",[v._v("树可以通过多种方式表示。常见的表示方法包括：")])]),v._v(" "),_("ol",[_("li",[_("code",[v._v("嵌套对象")]),v._v("：使用嵌套的JavaScript对象表示树结构。")]),v._v(" "),_("li",[_("code",[v._v("邻接表")]),v._v("：使用数组或哈希表表示每个节点及其子节点的关系。")]),v._v(" "),_("li",[_("code",[v._v("类和实例")]),v._v("：使用类和实例表示树和节点。")])])])}),[],!1,null,null,null);_.default=o.exports}}]);