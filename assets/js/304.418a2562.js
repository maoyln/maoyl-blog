(window.webpackJsonp=window.webpackJsonp||[]).push([[304],{629:function(v,_,e){"use strict";e.r(_);var c=e(4),o=Object(c.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"二叉树平衡"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树平衡"}},[v._v("#")]),v._v(" 二叉树平衡")]),v._v(" "),_("p",[_("code",[v._v("二叉平衡树（Balanced Binary Tree）")]),v._v("，又称为"),_("code",[v._v("AVL树")]),v._v("，是一种"),_("code",[v._v("自平衡")]),v._v("的"),_("code",[v._v("二叉搜索树")]),v._v("。在二叉平衡树中，任何节点的两个子树的"),_("code",[v._v("高度最大差别不超过1")]),v._v("，这样既保证了快速查找的时间复杂度"),_("code",[v._v("（O(log n)）")]),v._v("，也避免了"),_("code",[v._v("树的高度退化为链表")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"平衡二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[v._v("#")]),v._v(" 平衡二叉树")]),v._v(" "),_("p",[_("code",[v._v("平衡二叉树（Balanced Binary Search Tree, BBST）")]),v._v("是指满足"),_("code",[v._v("某种平衡条件")]),v._v("的"),_("code",[v._v("二叉搜索树")]),v._v("，例如"),_("code",[v._v("AVL树")]),v._v("、"),_("code",[v._v("红黑树")]),v._v("等。这些树的平衡性保证了它们在"),_("code",[v._v("插入和删除操作后")]),v._v("的"),_("code",[v._v("性能不会急剧下降")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"平衡二叉树的调整"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树的调整"}},[v._v("#")]),v._v(" 平衡二叉树的调整")]),v._v(" "),_("p",[v._v("当进行"),_("code",[v._v("插入或删除")]),v._v("操作"),_("code",[v._v("导致树失去平衡")]),v._v("时，需要通过"),_("code",[v._v("旋转")]),v._v("来"),_("code",[v._v("重新平衡树")]),v._v("。常见的旋转有四种："),_("code",[v._v("左旋")]),v._v("、"),_("code",[v._v("右旋")]),v._v("、"),_("code",[v._v("左-右旋")]),v._v("和"),_("code",[v._v("右-左旋")]),v._v("。")])])}),[],!1,null,null,null);_.default=o.exports}}]);